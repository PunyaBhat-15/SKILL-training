1. String palindrome
  #include <stdio.h>
#include <string.h>
#include <ctype.h>

// Function to check if a given string is a palindrome
int isPalindrome(char str[]) {
    int i, j;

    // Remove spaces and convert to lowercase
    int len = strlen(str);
    char cleanedStr[len];
    int index = 0;
    for (i = 0; i < len; i++) {
        if (str[i] != ' ') {
            cleanedStr[index++] = tolower(str[i]);
        }
    }
    cleanedStr[index] = '\0'; // Null-terminate the cleaned string

    // Check for palindrome
    int cleanedLen = strlen(cleanedStr);
    for (i = 0, j = cleanedLen - 1; i < j; i++, j--) {
        if (cleanedStr[i] != cleanedStr[j]) {
            return 0; // Not a palindrome
        }
    }
    return 1; // Palindrome
}

int main() {
    char str[100];
    printf("Enter a string: ");
    gets(str); // Get user input

    if (isPalindrome(str)) {
        printf("Yes, it's a palindrome.\n");
    } else {
        printf("No, it's not a palindrome.\n");
    }

    return 0;
}


2.finding substring
#include <stdio.h>
#include <string.h>

// Function to find a substring within a given string
int findSubstring(char str[], char sub[]) {
    char *pos = strstr(str, sub); // Find the first occurrence of sub in str
    if (pos) {
        return pos - str; // Return the index of the substring
    } else {
        return -1; // Substring not found
    }
}

int main() {
    char str[100], sub[50];
    printf("Enter main string: ");
    fgets(str, sizeof(str), stdin); // Get the main string from user

    printf("Enter substring: ");
    fgets(sub, sizeof(sub), stdin); // Get the substring from user

    // Remove newline characters from input
    str[strcspn(str, "\n")] = '\0';
    sub[strcspn(sub, "\n")] = '\0';

    int index = findSubstring(str, sub);

    if (index != -1) {
        printf("Substring found at index: %d\n", index);
    } else {
        printf("Substring not found.\n");
    }

    return 0;
}


3.
